diff --git a/Makefile b/Makefile
index 62fd0f8..0dd64af 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testloop\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -160,7 +161,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..94d6edc 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -6,6 +6,16 @@
 #include "proc.h"
 #include "defs.h"
 
+#define BLACK_COLOR "\033[30m"
+#define RED_COLOR "\033[31m"
+#define GREEN_COLOR "\033[32m"
+#define YELLOW_COLOR "\033[33m"
+#define BLUE_COLOR "\033[34m"
+#define MAGENTA_COLOR "\033[35m"
+#define CYAN_COLOR "\033[36m"
+#define WHITE_COLOR "\033[37m"
+#define RESET_COLOR "\033[0m"
+
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -125,6 +135,8 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+  p->length = 10;  // default
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -454,9 +466,22 @@ scheduler(void)
     // processes are waiting.
     intr_on();
 
+    struct proc* shortest = 0;
+
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
+        if((shortest == 0) || (p->length < shortest->length)){
+          shortest = p;
+        }
+      }
+      release(&p->lock);
+    }
+
+    p = shortest;
+    if(p){
+      acquire(&p->lock);
+      if(p->state == RUNNABLE){
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
@@ -470,6 +495,7 @@ scheduler(void)
       }
       release(&p->lock);
     }
+    
   }
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..3e78aa0 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+
+  int length;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..5da5c1a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setlength(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setlength]   sys_setlength,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..80f5839 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setlength  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..47cdbfa 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,22 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_setlength(void)
+{
+  int len;
+
+  argint(0, &len);
+
+  struct proc*p = myproc();
+
+  acquire(&p->lock);
+  p->length = len;
+  // printf("length of process %d set to %d\n", p->pid, p->length);
+  release(&p->lock);
+
+  return 0;
+  
+}
diff --git a/user/testloop.c b/user/testloop.c
new file mode 100644
index 0000000..0711fdc
--- /dev/null
+++ b/user/testloop.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char* argv[]){
+    int pid = getpid();
+    int entry_time = uptime();
+    uint32 iters = atoi(argv[1]);
+    setlength(iters);
+    printf("Process %d: Starting %u iterations at time %d\n", pid, iters, entry_time);
+    for(int i = 0; i < iters; i++){
+        // do some dummy work
+        for(int j = 0; j < 50000000; j++){
+            int x = j * j;
+            x = x + 1;
+        }
+    }
+    int exit_time = uptime();
+    printf("Process %d: Finished at time %d\n", pid, exit_time);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..7f3d213 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void setlength(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..b8920c4 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setlength");
