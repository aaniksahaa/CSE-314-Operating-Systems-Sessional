adding new system call - syscall

- user.h -> add func signature under syscalls
- usys.pl -> add entry(name)
- kernel/syscall.h -> add numbers
- kernel/syscall.c -> names and func pointers, extern names
- kernel/sysproc.c or sysfile.c -> write the detailed function 

adding new user program
- write the c file
- change in Makefile
- possible header includes

#include "kernel/types.h"
#include "kernel/stat.h"
#include "user/user.h"

adding a shared variable that needs lock
- proc.c
- and add lock for it

adding new process properties
- proc.h
- for using, do struct proc* p = myproc()

p->trapframe->a0, a1 etc contains the arguments
- may use argint, argstr, argaddr to get a specific argument

variables including locks in other files that are meant to be global must be fetched with extern

Scheduling

scheduling algos
- FCFS
	- FIFO
	- non-preemptive
	- convoy effect
- SJF
	- shortest job first
	- optimal turnaround if all appear at same time
	- when processes appear at diff times, works like FCFS
- SRTN
	- always pick the process with shortest remaining time next
	- 
	
	
	
#define BLACK_COLOR "\033[30m"
#define RED_COLOR "\033[31m"
#define GREEN_COLOR "\033[32m"
#define YELLOW_COLOR "\033[33m"
#define BLUE_COLOR "\033[34m"
#define MAGENTA_COLOR "\033[35m"
#define CYAN_COLOR "\033[36m"
#define WHITE_COLOR "\033[37m"
#define RESET_COLOR "\033[0m"


solutionB1


void
scheduler_fcfs(void)
{
  struct proc *p;
  struct cpu *c = mycpu();

  c->proc = 0;
  for(;;){
    // The most recent process to run may have had interrupts
    // turned off; enable them to avoid a deadlock if all
    // processes are waiting.
    intr_on();
    // find earliest process to run
    struct proc *earliest = 0;
    for(p = proc; p < &proc[NPROC]; p++){
      acquire(&p->lock);
      if (p->pid <= 2) { // skip init and shell
        release(&p->lock);
        continue;
      }
      if(p->state == RUNNABLE){
        if(earliest == 0 || p->entry_time < earliest->entry_time){
          earliest = p;
        }
      }
      release(&p->lock);
    }
    if(earliest){
      // printf("Kernel: Found earliest process %d at entry time %u\n", earliest->pid, earliest->entry_time);
      acquire(&earliest->lock);
      // run earliest till it finishes
      while(earliest->state == RUNNABLE){
        // printf("Kernel: Scheduling process %d\n", earliest->pid);
        earliest->state = RUNNING;
        c->proc = earliest;
        swtch(&c->context, &earliest->context);
        c->proc = 0;
      }
      release(&earliest->lock);
    }else{
      for(p = proc; p < &proc[NPROC]; p++) {
        acquire(&p->lock);
        if(p->pid <=2 && p->state == RUNNABLE) {
          // Switch to chosen process.  It is the process's job
          // to release its lock and then reacquire it
          // before jumping back to us.
          p->state = RUNNING;
          c->proc = p;
          swtch(&c->context, &p->context);

          // Process is done running for now.
          // It should have changed its p->state before coming back.
          c->proc = 0;
        }
        release(&p->lock);
      }
    }
  }
}

